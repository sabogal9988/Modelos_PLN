# -*- coding: utf-8 -*-
"""Untitled58.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16AMIvyNDmfJhMOOlccYO9tO3SZYbIZJY
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

df= pd.read_csv('/content/penguins.csv')
df

df.isna().sum()

imputer_num=SimpleImputer()
imputer_cat=SimpleImputer(strategy='most_frequent')
df[['bill_length_mm']]=imputer_num.fit_transform(df[['bill_length_mm']])
df[['bill_depth_mm']]=imputer_num.fit_transform(df[['bill_depth_mm']])
df[['flipper_length_mm']]=imputer_num.fit_transform(df[['flipper_length_mm']])
df[['body_mass_g']]=imputer_num.fit_transform(df[['body_mass_g']])
df[['sex']]=imputer_cat.fit_transform(df[['sex']])

df.isna().sum()

# Boxplot comparing species and bill_length_mm
plt.figure(figsize=(8, 6))
sns.boxplot(x='species', y='bill_length_mm', data=df)
plt.title('Boxplot of Bill Length by Species')
plt.show()

# Boxplot comparing species and bill_depth_mm
plt.figure(figsize=(8, 6))
sns.boxplot(x='species', y='bill_depth_mm', data=df)
plt.title('Boxplot of Bill Depth by Species')
plt.show()

# Boxplot comparing species and flipper_length_mm
plt.figure(figsize=(8, 6))

sns.boxplot(x='species', y='flipper_length_mm', data=df)
plt.title('Boxplot of Flipper Length by Species')
plt.show()

# Boxplot comparing species and body_mass_g
plt.figure(figsize=(8, 6))
sns.boxplot(x='species', y='body_mass_g', data=df)
plt.title('Boxplot of Body Mass by Species')
plt.show()

# Select numerical columns for scaling (excluding 'Unnamed: 0' and 'year' if they are identifiers/metadata)
# Based on previous steps, 'bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g' are numerical and imputed.
numerical_cols = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']

# Initialize the StandardScaler
scaler = StandardScaler()

# Apply StandardScaler to the numerical columns
df_scaled = df.copy() # Create a copy to avoid modifying the original DataFrame directly
df_scaled[numerical_cols] = scaler.fit_transform(df_scaled[numerical_cols])

# Display the first few rows of the scaled DataFrame
display(df_scaled.head())

# Prepare data for modeling
# Features (X) are the scaled numerical columns
X = df_scaled[numerical_cols]
# Target (y) is the 'species' column
y = df_scaled['species']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# Initialize and train the Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print("Classification Report:")
print(report)